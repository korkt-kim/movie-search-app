{"ast":null,"code":"var _jsxFileName = \"/Users/gyul/git/copy/coppy/grip-movie-app/src/pages/movies/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from 'recoil';\nimport { usePrevious } from 'react-use';\nimport { favoriteMovieState, keywordState, pageState, searchResultState, selectedMovieState, totalCountState } from 'states/movie';\nimport { modalOpenState } from 'states/modal';\nimport { useFirstRender } from 'hooks';\nimport { getMovieSearchApi } from 'services/movie';\nimport MovieSearch from './search';\nimport MovieItem from './item';\nimport Modal from 'components/modal';\nimport styles from './movies.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MOVIES_PER_PAGE = 10;\n\nconst Movies = () => {\n  _s();\n\n  const keyword = useRecoilValue(keywordState);\n  const [page, setPage] = useRecoilState(pageState);\n  const [totalCount, setTotalCount] = useRecoilState(totalCountState);\n  const [movies, setMovies] = useRecoilState(searchResultState);\n  const resetMovies = useResetRecoilState(searchResultState);\n  const [favoriteMovies, setFavoriteMovies] = useRecoilState(favoriteMovieState);\n  const selectedMovie = useRecoilValue(selectedMovieState);\n  const [isModalOpen, setIsModalOpen] = useRecoilState(modalOpenState);\n  const firstRender = useFirstRender();\n  const lastPage = useMemo(() => Math.ceil(totalCount / MOVIES_PER_PAGE), [totalCount]);\n  const prevKeyword = usePrevious(keyword);\n  const prevPage = usePrevious(page);\n  const isFavorite = favoriteMovies.includes(selectedMovie);\n\n  const toggleFavorite = () => {\n    if (isFavorite) {\n      setFavoriteMovies(prev => prev.filter(item => item.imdbID !== selectedMovie.imdbID));\n    } else {\n      setFavoriteMovies(prev => [...prev, selectedMovie]);\n    }\n\n    setIsModalOpen(false);\n  };\n\n  useEffect(() => {\n    if (firstRender) return;\n    if (keyword === prevKeyword && page === prevPage) return;\n\n    const getSearchResult = async () => {\n      const response = await getMovieSearchApi({\n        s: keyword,\n        page\n      });\n      const {\n        Search,\n        totalResults\n      } = response.data;\n\n      if (!Search || !totalResults) {\n        resetMovies();\n        return;\n      }\n\n      setMovies(prev => [...prev, ...Search]);\n      setTotalCount(Number(totalResults));\n    };\n\n    getSearchResult();\n  }, [keyword, page, setMovies, resetMovies, setTotalCount, firstRender, prevKeyword, prevPage]);\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerHeight + Math.ceil(window.scrollY) < document.body.offsetHeight || page >= lastPage) return;\n      setPage(prev => prev + 1);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [lastPage, page, setPage]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MovieSearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieItem, {\n          movie: movie\n        }, movie.imdbID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), !movies.length && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.noResult,\n        children: \"\\uAC80\\uC0C9 \\uACB0\\uACFC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      text: isFavorite ? '이 영화를 즐겨찾기에서 삭제할까요?' : '이 영화를 즐겨찾기에 추가할까요?',\n      onConfirm: toggleFavorite\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movies, \"DDLtU5n2LmUlP3GcvrbU68VmvmE=\", false, function () {\n  return [useRecoilValue, useRecoilState, useRecoilState, useRecoilState, useResetRecoilState, useRecoilState, useRecoilValue, useRecoilState, useFirstRender, usePrevious, usePrevious];\n});\n\n_c = Movies;\nexport default Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"names":["useEffect","useMemo","useRecoilState","useRecoilValue","useResetRecoilState","usePrevious","favoriteMovieState","keywordState","pageState","searchResultState","selectedMovieState","totalCountState","modalOpenState","useFirstRender","getMovieSearchApi","MovieSearch","MovieItem","Modal","styles","MOVIES_PER_PAGE","Movies","keyword","page","setPage","totalCount","setTotalCount","movies","setMovies","resetMovies","favoriteMovies","setFavoriteMovies","selectedMovie","isModalOpen","setIsModalOpen","firstRender","lastPage","Math","ceil","prevKeyword","prevPage","isFavorite","includes","toggleFavorite","prev","filter","item","imdbID","getSearchResult","response","s","Search","totalResults","data","Number","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","addEventListener","removeEventListener","map","movie","length","noResult"],"sources":["/Users/gyul/git/copy/coppy/grip-movie-app/src/pages/movies/index.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from 'recoil'\nimport { usePrevious } from 'react-use'\n\nimport {\n  favoriteMovieState,\n  keywordState,\n  pageState,\n  searchResultState,\n  selectedMovieState,\n  totalCountState,\n} from 'states/movie'\nimport { modalOpenState } from 'states/modal'\nimport { useFirstRender } from 'hooks'\nimport { getMovieSearchApi } from 'services/movie'\n\nimport Header from 'components/header'\nimport MovieSearch from './search'\nimport MovieItem from './item'\nimport Modal from 'components/modal'\nimport styles from './movies.module.scss'\n\nconst MOVIES_PER_PAGE = 10\n\nconst Movies = () => {\n  const keyword = useRecoilValue(keywordState)\n  const [page, setPage] = useRecoilState(pageState)\n  const [totalCount, setTotalCount] = useRecoilState(totalCountState)\n  const [movies, setMovies] = useRecoilState(searchResultState)\n  const resetMovies = useResetRecoilState(searchResultState)\n  const [favoriteMovies, setFavoriteMovies] = useRecoilState(favoriteMovieState)\n  const selectedMovie = useRecoilValue(selectedMovieState)\n  const [isModalOpen, setIsModalOpen] = useRecoilState(modalOpenState)\n\n  const firstRender = useFirstRender()\n  const lastPage = useMemo(() => Math.ceil(totalCount / MOVIES_PER_PAGE), [totalCount])\n  const prevKeyword = usePrevious(keyword)\n  const prevPage = usePrevious(page)\n  const isFavorite = favoriteMovies.includes(selectedMovie)\n\n  const toggleFavorite = () => {\n    if (isFavorite) {\n      setFavoriteMovies((prev) => prev.filter((item) => item.imdbID !== selectedMovie.imdbID))\n    } else {\n      setFavoriteMovies((prev) => [...prev, selectedMovie])\n    }\n    setIsModalOpen(false)\n  }\n\n  useEffect(() => {\n    if (firstRender) return\n    if (keyword === prevKeyword && page === prevPage) return\n\n    const getSearchResult = async () => {\n      const response = await getMovieSearchApi({\n        s: keyword,\n        page,\n      })\n\n      const { Search, totalResults } = response.data\n\n      if (!Search || !totalResults) {\n        resetMovies()\n        return\n      }\n\n      setMovies((prev) => [...prev, ...Search])\n      setTotalCount(Number(totalResults))\n    }\n\n    getSearchResult()\n  }, [keyword, page, setMovies, resetMovies, setTotalCount, firstRender, prevKeyword, prevPage])\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.innerHeight + Math.ceil(window.scrollY) < document.body.offsetHeight || page >= lastPage) return\n      setPage((prev) => prev + 1)\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [lastPage, page, setPage])\n\n  return (\n    <>\n      <MovieSearch />\n      <main>\n        <ul>\n          {movies.map((movie) => (\n            <MovieItem key={movie.imdbID} movie={movie} />\n          ))}\n        </ul>\n        {!movies.length && <div className={styles.noResult}>검색 결과가 없습니다.</div>}\n      </main>\n      {isModalOpen && (\n        <Modal\n          text={isFavorite ? '이 영화를 즐겨찾기에서 삭제할까요?' : '이 영화를 즐겨찾기에 추가할까요?'}\n          onConfirm={toggleFavorite}\n        />\n      )}\n    </>\n  )\n}\n\nexport default Movies\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}